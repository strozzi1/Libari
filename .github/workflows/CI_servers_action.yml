name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  create-docker-images:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v3
    - name: Create .env.prod and .env files
      run: |
        echo 'MONGO_URL will be set at deploy stage' 
        echo PORT=${{ vars.PORT }} >> ./server/.env.prod
        echo 'JWT_SECRET will be set at deploy stage'
        echo 'GOOGLE_API_KEY will be set at deploy stage'
        echo 'AWS_ACCESS_KEY_ID will be set at deploy stage'
        echo 'AWS_SECRET_ACCESS_KEY will be set at deploy stage'
        echo AWS_S3_BUCKET_REGION=${{ vars.AWS_S3_BUCKET_REGION }} >> ./server/.env.prod
        echo AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} >> ./server/.env.prod
        echo AWS_CLOUDFRONT_BASE_URL=${{ vars.AWS_CLOUDFRONT_BASE_URL }} >> ./server/.env.prod
        echo 'AWS_SQS_URL will be set at deploy stage'
        
        echo AWS_REGION=${{ vars.AWS_S3_BUCKET_REGION }} >> ./image-worker/.env
        echo AWS_S3_BUCKET=${{ vars.AWS_S3_BUCKET }} >> ./image-worker/.env
        echo 'AWS_ACCESS_KEY_ID will be set at deploy stage'
        echo 'AWS_SECRET_ACCESS_KEY will be set at deploy stage'

    - name: Docker Login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD docker.io

    - name: Build the Docker images
      run: | 
        ls -a
        docker-compose -f docker-compose.prod.yml build
        
    - name: Docker Push
      run: |
        docker images
        docker-compose -f docker-compose.prod.yml push
  
  send-env-vars:
    runs-on: ubuntu-latest
    needs: create-docker-images
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Create .env file
      id: env-file
      run: |
        touch .env.prod
        echo "Now creating env file
        echo MONGO_URL=${{ secrets.MONGO_URL }} >> ./.env.prod
        echo PORT=${{ vars.PORT }} >> ./.env.prod
        echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> ./.env.prod
        echo GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} >> ./.env.prod
        echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> ./.env.prod
        echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> ./.env.prod
        echo AWS_S3_BUCKET_REGION=${{ vars.AWS_S3_BUCKET_REGION }} >> ./.env.prod
        echo AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} >> ./.env.prod
        echo AWS_CLOUDFRONT_BASE_URL=${{ vars.AWS_CLOUDFRONT_BASE_URL }} >> ./.env.prod
        echo AWS_SQS_URL=${{ secrets.AWS_SQS_URL }} >> ./.env.prod
    - name: copy file to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOSTNAME }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        source: ".env.prod"
        target: ./
    
  
  ssh_into_EC2:  
    runs-on: ubuntu-latest
    needs: send-env-vars
    steps:
    - name: executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@v0.1.10
      env:  
        SSH_PORT: ${{ secrets.SSH_PORT}}
        AWS_CLOUDFRONT_BASE_URL: ${{ vars.AWS_CLOUDFRONT_BASE_URL }}
      with:
        host: ${{ secrets.EC2_HOSTNAME }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        debug: true
        script: |
          whoami 
          ls -a
          docker stop libari-api
          docker stop libari-image-worker
          docker rm libari-api
          docker rm libari-image-worker
          docker pull strozzij/libari-api-server
          docker pull strozzij/libari-image-resize-service
          docker run --name libari-api --env-file .env.prod strozzij/libari-api-server:latest
          docker run --name libari-image-worker --env-file .env.prod strozzij/libari-image-resize-service:latest
